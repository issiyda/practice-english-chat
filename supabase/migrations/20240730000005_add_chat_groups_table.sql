-- Create chat_groups table
CREATE TABLE public.chat_groups (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    title VARCHAR(255),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Add comments
COMMENT ON TABLE public.chat_groups IS 'Stores chat conversation groups owned by users.';
COMMENT ON COLUMN public.chat_groups.id IS 'Unique identifier for the chat group.';
COMMENT ON COLUMN public.chat_groups.user_id IS 'Foreign key to the user who owns this chat group.';
COMMENT ON COLUMN public.chat_groups.title IS 'Display title for the chat group (e.g., "English Conversation", "Business English").';
COMMENT ON COLUMN public.chat_groups.created_at IS 'Timestamp of when the chat group was created.';
COMMENT ON COLUMN public.chat_groups.updated_at IS 'Timestamp of the last update to the chat group.';

-- Enable Row Level Security
ALTER TABLE public.chat_groups ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can view their own chat groups." ON public.chat_groups
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own chat groups." ON public.chat_groups
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own chat groups." ON public.chat_groups
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own chat groups." ON public.chat_groups
    FOR DELETE USING (auth.uid() = user_id);

-- Add trigger for updated_at
CREATE TRIGGER on_chat_groups_updated
    BEFORE UPDATE ON public.chat_groups
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- Create an index on user_id for better query performance
CREATE INDEX idx_chat_groups_user_id ON public.chat_groups (user_id); 