-- Create bookmarks table
CREATE TABLE public.bookmarks (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    suggestion_id BIGINT NOT NULL REFERENCES public.suggestions(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT bookmarks_user_suggestion_unique UNIQUE (user_id, suggestion_id)
);

-- Add comments
COMMENT ON TABLE public.bookmarks IS 'Stores user bookmarks of AI suggestions.';
COMMENT ON COLUMN public.bookmarks.id IS 'Unique identifier for the bookmark.';
COMMENT ON COLUMN public.bookmarks.user_id IS 'ID of the user who created the bookmark.';
COMMENT ON COLUMN public.bookmarks.suggestion_id IS 'ID of the bookmarked suggestion.';
COMMENT ON COLUMN public.bookmarks.created_at IS 'Timestamp of when the bookmark was created.';
COMMENT ON COLUMN public.bookmarks.updated_at IS 'Timestamp of the last update to the bookmark.';
COMMENT ON CONSTRAINT bookmarks_user_suggestion_unique ON public.bookmarks IS 'A user cannot bookmark the same suggestion multiple times.';

-- Enable Row Level Security
ALTER TABLE public.bookmarks ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can manage their own bookmarks." ON public.bookmarks
    FOR ALL USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- Add trigger for updated_at
CREATE TRIGGER on_bookmarks_updated
    BEFORE UPDATE ON public.bookmarks
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at(); 