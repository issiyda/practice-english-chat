-- Create chat_messages table
CREATE TABLE public.chat_messages (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    role VARCHAR(50) NOT NULL CHECK (role IN ('user', 'ai')),
    message TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Add comments
COMMENT ON TABLE public.chat_messages IS 'Stores the conversation history between users and the AI.';
COMMENT ON COLUMN public.chat_messages.id IS 'Unique identifier for the chat message.';
COMMENT ON COLUMN public.chat_messages.user_id IS 'Foreign key to the user who sent the message. NULL for AI messages.';
COMMENT ON COLUMN public.chat_messages.role IS 'The role of the sender: ''user'' or ''ai''.';
COMMENT ON COLUMN public.chat_messages.message IS 'The content of the message.';
COMMENT ON COLUMN public.chat_messages.created_at IS 'Timestamp of when the message was created.';
COMMENT ON COLUMN public.chat_messages.updated_at IS 'Timestamp of the last update to the message.';

-- Enable Row Level Security
ALTER TABLE public.chat_messages ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can view their own messages and AI messages." ON public.chat_messages
    FOR SELECT USING (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can insert their own messages." ON public.chat_messages
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Add trigger to automatically update updated_at timestamp
-- The handle_updated_at function is assumed to have been created in a previous migration.
CREATE TRIGGER on_chat_messages_updated
    BEFORE UPDATE ON public.chat_messages
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at(); 