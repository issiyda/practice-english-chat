-- Create suggestions table
CREATE TABLE public.suggestions (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    chat_message_id BIGINT NOT NULL REFERENCES public.chat_messages(id) ON DELETE CASCADE,
    english_sentence TEXT NOT NULL,
    japanese_translation TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Add comments
COMMENT ON TABLE public.suggestions IS 'Stores expression suggestions generated by the AI for a chat message.';
COMMENT ON COLUMN public.suggestions.id IS 'Unique identifier for the suggestion.';
COMMENT ON COLUMN public.suggestions.chat_message_id IS 'Foreign key to the AI message containing this suggestion.';
COMMENT ON COLUMN public.suggestions.english_sentence IS 'The suggested English sentence.';
COMMENT ON COLUMN public.suggestions.japanese_translation IS 'The Japanese translation of the sentence.';
COMMENT ON COLUMN public.suggestions.created_at IS 'Timestamp of when the suggestion was created.';
COMMENT ON COLUMN public.suggestions.updated_at IS 'Timestamp of the last update to the suggestion.';

-- Enable Row Level Security
ALTER TABLE public.suggestions ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
-- This policy allows users to view suggestions for messages they are allowed to view.
CREATE POLICY "Users can view suggestions for accessible messages." ON public.suggestions
    FOR SELECT USING (
        EXISTS (
            SELECT 1
            FROM public.chat_messages
            WHERE id = suggestions.chat_message_id
        )
    );
-- Users should not be able to CUD suggestions directly. This is handled by a service role.

-- Add trigger for updated_at
CREATE TRIGGER on_suggestions_updated
    BEFORE UPDATE ON public.suggestions
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at(); 